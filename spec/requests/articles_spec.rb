require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/articles", type: :request do
  before(:each) do
    @user = User.create!(username: "John", email: "john@email.com", password: "password")
    @article = Article.create!(id: "1", title: "Title", content: "Content")
  end


  describe "GET /index" do
    it "returns http success" do
      get "/main/index"
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET /new" do
    it "returns http success" do
      get "/articles/new"
      expect(response).to have_http_status(:found)
    end
  end

  describe "GET /show" do
    it "returns http success" do
      get "/articles/1"
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET /edit" do
    it "returns http success" do
      get "/articles/1/edit"
      expect(response).to have_http_status(:found)
    end
  end

  describe "GET /create" do
    it "returns http success" do
      get "/articles/new"
      expect(response).to have_http_status(:found)
    end
  end

  describe "GET /update" do
    it "returns http success" do
      patch "/articles/1"
      expect(response).to have_http_status(:found)
    end
  end

  describe "GET /destroy" do
     it "returns http success" do
       delete "/articles/1"
       expect(response).to have_http_status(:found)
     end
   end
end
